////////////////////////////////////////////////////////////////////////
// MPI: basics
////////////////////////////////////////////////////////////////////////
#include "td1c.hpp"
////////////////////////////////////////////////////////////////////////
clmpi::clmpi()
{
//nyi  mpi_init();
//nyi  nrank = (long) MPI::COMM_WORLD.Get_size();
//nyi  myrank = (long) MPI::COMM_WORLD.Get_rank();
//nyi  MPI_Get_processor_name(hostname, &hostname_len);

  long ithr;
  #pragma omp parallel default(shared) private(ithr)
  {
    ithr = (long) omp_get_thread_num();
    if (ithr == 0) nthr = (long) omp_get_num_threads();
  }

  print();
}
////////////////////////////////////////////////////////////////////////
clmpi::~clmpi()
{
//nyi  mpi_final();
}
////////////////////////////////////////////////////////////////////////
void clmpi::init()
{
}
////////////////////////////////////////////////////////////////////////
void clmpi::final()
{
}
////////////////////////////////////////////////////////////////////////
void clmpi::clear()
{
  printf("clmpi::clear should never be called.\n");
  abort();
}
////////////////////////////////////////////////////////////////////////
void clmpi::print() const
{
//nyi  printf("# %s: rank %10ld of %10ld: with %10ld threads\n",
//nyi	 hostname, myrank, nrank, nthr);
}
////////////////////////////////////////////////////////////////////////
void clmpi::omp_divide(long ithr, long ll0, long ul0, long& ll1, long& ul1) const
{
  long ntot = ul0 - ll0 + 1;
  long npp = ntot / nthr;

  if (ithr == nthr - 1) {
    ll1 = npp * ithr + ll0;
    ul1 = ul0;
  } else {
    ll1 = npp * ithr + ll0;
//Orimo_ECS
    //old ul1 = ll1 + npp - 1;
    ul1 = ll1 + npp;
//Orimo_ECS
  }
}
////////////////////////////////////////////////////////////////////////
void clmpi::mpi_init()
{
//nyi  long required = MPI_THREAD_FUNNELED;
//nyi  long provided = MPI::Init_thread(required);
//nyi  if (provided != required) abort();
}
////////////////////////////////////////////////////////////////////////
void clmpi::mpi_final()
{
//nyi  MPI::Finalize();
}
////////////////////////////////////////////////////////////////////////
void clmpi::mpi_barrier() const
{
//nyi  MPI::COMM_WORLD.Barrier();
}
////////////////////////////////////////////////////////////////////////
